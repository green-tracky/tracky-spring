# 파일명: .github/workflows/tracky.yml

# 워크플로우의 이름을 지정합니다.
name: tracky

# 이 워크플로우가 언제 실행될지를 정의합니다.
# dev 브랜치에 push 이벤트가 발생했을 때 실행됩니다.
on:
  push:
    branches:
      - actions-test

# 실행될 작업(job)들을 정의합니다.
jobs:
  # 'build'라는 이름의 작업을 정의합니다.
  build:
    # 이 작업이 실행될 가상 머신의 종류를 지정합니다. (Ubuntu 최신 버전)
    runs-on: ubuntu-latest
    
    # 이 작업이 수행할 단계(step)들을 순서대로 정의합니다.
    steps:
      # 1. 소스 코드 체크아웃
      # 현재 레포지토리의 소스 코드를 가상 머신으로 가져옵니다.
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 및 Gradle 캐시 설정
      # 자바(JDK) 21 버전을 'temurin' 배포판으로 설치하고, Gradle 빌드 속도를 높이기 위해 캐시를 설정합니다.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      # 3. gradlew 파일에 실행 권한 부여
      # Gradle Wrapper 스크립트를 실행할 수 있도록 권한을 설정합니다.
      - name: Permission
        run: chmod +x ./gradlew

      # 4. Gradle로 빌드 및 테스트 실행 (가장 중요한 부분)
      # gradlew를 사용해 프로젝트를 클린, 빌드, 테스트합니다.
      # 이 단계에서 스프링 부트가 실행되므로, 필요한 모든 환경 변수를 여기서 주입해야 합니다.
      - name: Build with Gradle
        run: ./gradlew clean build
        
        # ❗️❗️❗️ 바로 이 부분이 이번 문제 해결의 핵심입니다 ❗️❗️❗️
        # GitHub Secrets에 저장된 값들을 빌드 환경의 '환경 변수'로 만들어줍니다.
        env:
          # [Firebase Secrets 주입]
          # application.properties의 ${fb.type}은 FB_TYPE 환경 변수를 찾습니다.
          # 이 라인은 GitHub Secret 'FB_TYPE'의 값을 가져와 FB_TYPE 환경 변수를 만듭니다.
          FB_TYPE: ${{ secrets.FB_TYPE }}
          FB_PROJECT_ID: ${{ secrets.FB_PROJECT_ID }}
          FB_PRIVATE_KEY_ID: ${{ secrets.FB_PRIVATE_KEY_ID }}
          FB_PRIVATE_KEY: ${{ secrets.FB_PRIVATE_KEY }}
          FB_CLIENT_EMAIL: ${{ secrets.FB_CLIENT_EMAIL }}
          FB_CLIENT_ID: ${{ secrets.FB_CLIENT_ID }}
          FB_AUTH_URI: ${{ secrets.FB_AUTH_URI }}
          FB_TOKEN_URI: ${{ secrets.FB_TOKEN_URI }}
          FB_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.FB_AUTH_PROVIDER_X509_CERT_URL }}
          FB_CLIENT_X509_CERT_URL: ${{ secrets.FB_CLIENT_X509_CERT_URL }}
          FB_UNIVERSE_DOMAIN: ${{ secrets.FB_UNIVERSE_DOMAIN }}

          # [AWS Secrets 주입]
          # application.properties의 ${aws.s3.access.key}는 AWS_S3_ACCESS_KEY 환경 변수를 찾습니다.
          AWS_S3_ACCESS_KEY: ${{ secrets.AWS_S3_ACCESS_KEY }}
          AWS_S3_SECRET_KEY: ${{ secrets.AWS_S3_SECRET_KEY }}

          # [Sentry Secret 주입] - 이 한 줄을 추가하면 됩니다!
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      # 5. 현재 시간 가져오기 (배포 버전 관리를 위함)
      # UTC가 기준이기 때문에 한국 시간으로 맞추려면 +9시간 해야 합니다.
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      # 6. 현재 시간 출력 (확인용)
      - name: Show Current Time
        run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"

#      # 7. AWS Elastic Beanstalk 배포 단계 (현재 주석 처리됨)
#      # EB에 CD 하기 위해 추가 작성
#      - name: Generate deployment package
#        run: |
#          mkdir deploy
#          cp build/libs/*.jar deploy/application.jar
#          cp Procfile deploy/Procfile
#          cp -r .ebextensions deploy/.ebextensions
#          cd deploy && zip -r deploy.zip .
#      - name: Deploy to EB
#        uses: einaregilsson/beanstalk-deploy@v22
#        with:
#          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
#          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
#          application_name: tracky # 엘리스틱 빈스톡 애플리케이션 이름!
#          environment_name: tracky-env # 엘리스틱 빈스톡 환경 이름!
#          version_label: tracky-${{steps.current-time.outputs.formattedTime}}
#          region: ap-northeast-2
#          deployment_package: deploy/deploy.zip